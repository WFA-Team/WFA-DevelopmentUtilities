Session1 -> File to plugin mapping
	Mapping Models:-
	Plugin <-> 1-1 Mapping <-> ComponentType
	Think -> Will you ever need to create a plugin that can handle multiple componentTypes?? Deferring this idea as of now
		What could be the overhead to design if I allow a single plugin to manage various componentTypes?
		
		Post->Have changed this to 1-Many mapping now
	
	ComponentType <-> 1-Many Mapping <-> ComponentNames # There can be many components of a single type and all should be handled by same plugin only
	ComponentNames <-> No apparent relation <-> Component Source # May be I'll remove the component source attribute from SPI
	
	File <-> Many to many mapping <-> Plugin
		Elaborate:-
			1. For obvious reasons one plugin is allowed to handle multiple files potentially representing same componentType (not necessarily componentNames)
			2. But why do I need multiple plugins to operate on a single file?? Use case could be that multiple components are logging into same file. Eg MMI logs

Session2 -> Plugin_decide config to be a plugin level or general??
	
	Post->Implemented both, so if the infra level plugin-decide is disabled, then no plugin will be bothered at all but if enabled then user can or not enable at the plugin 
	level 
	

// TODO-> Think about how to handle callbacks if in a chain of tasks one fails in the middle, but client put the callback on last task. 
	We are not yet scheduling remaining chain if current task fails. How to handle this? Use a JoinedPromise which joins full chain perhaps.